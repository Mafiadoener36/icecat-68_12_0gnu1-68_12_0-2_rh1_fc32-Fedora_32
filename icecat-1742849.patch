
# HG changeset patch
# User Alexandre Lissy <lissyx+mozillians@lissyx.dyndns.org>
# Date 1639046833 0
# Node ID 33f81fb07d792be30dcd1008b21b187ca24f21e6
# Parent  3382e4da79289240c4c2fe718b461f7a58bce553
Bug 1742849 - Parsing CCache 4.4+ stats output r=mhentges

Statistics output changed after 4.4 and requires different parsing, as
well as an extra --verbose to get the same informations as before.

See https://github.com/ccache/ccache/commit/8892814e8a790d615e44262c0005513d6d49f9e1

Differential Revision: https://phabricator.services.mozilla.com/D133086

diff --git a/python/mozbuild/mozbuild/controller/building.py b/python/mozbuild/mozbuild/controller/building.py
--- a/python/mozbuild/mozbuild/controller/building.py
+++ b/python/mozbuild/mozbuild/controller/building.py
@@ -5,16 +5,17 @@
 from __future__ import absolute_import, print_function, unicode_literals
 
 import errno
 import getpass
 import io
 import json
 import logging
 import os
+import re
 import shutil
 import six
 import subprocess
 import sys
 import time
 
 from collections import (
     Counter,
@@ -583,21 +584,24 @@ class BuildMonitor(MozbuildObject):
                 "Swap in/out (MB): {sin}/{sout}",
             )
 
     def ccache_stats(self):
         ccache_stats = None
 
         ccache = mozfile.which("ccache")
         if ccache:
+            # With CCache v4.4+ statistics might require --verbose
+            is_version_4_4_or_newer = CCacheStats.check_version_4_4_or_newer(ccache)
             try:
                 output = subprocess.check_output(
-                    [ccache, "-s"], universal_newlines=True
+                    [ccache, "-s" if not is_version_4_4_or_newer else "-sv"],
+                    universal_newlines=True,
                 )
-                ccache_stats = CCacheStats(output)
+                ccache_stats = CCacheStats(output, is_version_4_4_or_newer)
             except ValueError as e:
                 self.log(logging.WARNING, "ccache", {"msg": str(e)}, "{msg}")
         return ccache_stats
 
 
 class TerminalLoggingHandler(logging.Handler):
     """Custom logging handler that works with terminal window dressing.
 
@@ -883,33 +887,154 @@ class CCacheStats(object):
         ("cache_files", "files in cache"),
         ("cache_size", "cache size"),
         ("cache_max_size", "max cache size"),
     ]
 
     DIRECTORY_DESCRIPTION = "cache directory"
     PRIMARY_CONFIG_DESCRIPTION = "primary config"
     SECONDARY_CONFIG_DESCRIPTION = "secondary config"
+
+    STATS_KEYS_4_4 = [
+        ("stats_updated", "Summary/Stats updated"),
+        (
+            "cache_hit_rate",
+            "Summary/Hits",
+            lambda x: next(iter(re.findall(r"\((.*) %\)", x)), "0.00 %"),
+        ),
+        (
+            "cache_hit_direct",
+            "Summary/Hits/Direct",
+            lambda x: next(iter(re.findall(r"(\d+)\s+/\s+\d+\s+\(", x)), "0"),
+        ),
+        (
+            "cache_hit_preprocessed",
+            "Summary/Hits/Preprocessed",
+            lambda x: next(iter(re.findall(r"(\d+)\s+/\s+\d+\s+\(", x)), "0"),
+        ),
+        ("cache_miss", "Summary/Misses"),
+        ("error", "Summary/Errors"),
+        ("linking", "Uncacheable/Called for linking"),
+        ("preprocessing", "Uncacheable/Called for preprocessing"),
+        ("failed", "Uncacheable/Compilation failed"),
+        ("preprocessor_error", "Uncacheable/Preprocessing failed"),
+        ("cache_file_missing", "Errors/Missing cache file"),
+        ("bad_args", "Uncacheable/Bad compiler arguments"),
+        ("autoconf", "Uncacheable/Autoconf compile/link"),
+        ("no_input", "Uncacheable/No input file"),
+        ("num_cleanups", "Primary storage/Cleanups"),
+        ("cache_files", "Primary storage/Files"),
+        # Cache size is reported in GB, see
+        # https://github.com/ccache/ccache/commit/8892814e8a790d615e44262c0005513d6d49f9e1#diff-30ec2bbfafe4c3842c8e35179ef0d3253a66dcc054812e50049d0ca3b10e317fR274
+        (
+            "cache_size",
+            "Primary storage/Cache size (GB)",
+            lambda x: str(
+                float(next(iter(re.findall(r"(.*)\s+/\s+.*\s+\(", x)), "0"))
+                * CCacheStats.GiB
+            ),
+            True,  # Allow to continue evaluation for the next value
+        ),
+        (
+            "cache_max_size",
+            "Primary storage/Cache size (GB)",
+            lambda x: str(
+                float(next(iter(re.findall(r".*\s+/\s+(.*)\s+\(", x)), "0"))
+                * CCacheStats.GiB
+            ),
+        ),
+    ]
+
+    SKIP_KEYS_4_4 = [
+        "Summary/Uncacheable",
+        "Summary/Misses/Direct",
+        "Summary/Misses/Preprocessed",
+        "Primary storage/Hits",
+        "Primary storage/Misses",
+    ]
+
+    DIRECTORY_DESCRIPTION_4_4 = "Summary/Cache directory"
+    PRIMARY_CONFIG_DESCRIPTION_4_4 = "Summary/Primary config"
+    SECONDARY_CONFIG_DESCRIPTION_4_4 = "Summary/Secondary config"
+
     ABSOLUTE_KEYS = {"cache_files", "cache_size", "cache_max_size"}
     FORMAT_KEYS = {"cache_size", "cache_max_size"}
 
     GiB = 1024 ** 3
     MiB = 1024 ** 2
     KiB = 1024
 
-    def __init__(self, output=None):
+    def __init__(self, output=None, is_version_4_4_or_newer=False):
         """Construct an instance from the output of ccache -s."""
         self._values = {}
         self.cache_dir = ""
         self.primary_config = ""
         self.secondary_config = ""
 
         if not output:
             return
 
+        if is_version_4_4_or_newer:
+            self._parse_human_format_4_4_plus(output)
+        else:
+            self._parse_human_format(output)
+
+    def _parse_human_format_4_4_plus(self, content):
+        head = ""
+        subhead = ""
+
+        for line in content.splitlines():
+            name = ""
+            if not line:
+                continue
+            if line.startswith("  "):
+                if not line.startswith("    "):
+                    subhead = line.strip().split(":")[0]
+                name = line.strip().split(":")[0]
+                raw_value = ":".join(line.split(":")[1:]).strip()
+                if raw_value:
+                    key = head
+                    if subhead != name:
+                        key += "/{}".format(subhead)
+                    key += "/{}".format(name)
+                    self._parse_line_4_4_plus(key, raw_value)
+            else:
+                head = line.strip(":")
+                subhead = ""
+
+    def _parse_line_4_4_plus(self, key, value):
+        if key.startswith(self.DIRECTORY_DESCRIPTION_4_4):
+            self.cache_dir = value
+        elif key.startswith(self.PRIMARY_CONFIG_DESCRIPTION_4_4):
+            self.primary_config = value
+        elif key.startswith(self.SECONDARY_CONFIG_DESCRIPTION_4_4):
+            self.secondary_config = value
+        else:
+            for seq in self.STATS_KEYS_4_4:
+                stat_key = seq[0]
+                stat_description = seq[1]
+                raw_value = value
+                if len(seq) > 2:
+                    raw_value = seq[2](value)
+                if stat_key not in self._values and key == stat_description:
+                    self._values[stat_key] = self._parse_value(raw_value)
+
+                    # We dont want to break when we need to extract two infos
+                    # from the same line
+                    if len(seq) < 4:
+                        break
+            else:
+                if key not in self.SKIP_KEYS_4_4:
+                    raise ValueError(
+                        "Failed to parse ccache stats output: '{}' '{}'".format(
+                            key, value
+                        )
+                    )
+
+    def _parse_human_format(self, output):
         for line in output.splitlines():
             line = line.strip()
             if line:
                 self._parse_line(line)
 
     def _parse_line(self, line):
         line = six.ensure_text(line)
         if line.startswith(self.DIRECTORY_DESCRIPTION):
@@ -1050,6 +1175,29 @@
         else:
             return "%.1f Kbytes" % (float(v) / CCacheStats.KiB)
 
+    @staticmethod
+    def check_version_4_4_or_newer(ccache):
+        output_version = subprocess.check_output(
+            [ccache, "--version"], universal_newlines=True
+        )
+        return CCacheStats._is_version_4_4_or_newer(output_version)
+
+    @staticmethod
+    def _is_version_4_4_or_newer(output):
+        if "ccache version" not in output:
+            return False
+
+        major = 0
+        minor = 0
+
+        for line in output.splitlines():
+            version = re.search(r"ccache version (\d+).(\d+).*", line)
+            if version:
+                major = int(version.group(1))
+                minor = int(version.group(2))
+                break
+
+        return ((major << 8) + minor) >= ((4 << 8) + 4)
 
 class BuildDriver(MozbuildObject):
     """Provides a high-level API for build actions."""
diff --git a/python/mozbuild/mozbuild/test/controller/test_ccachestats.py b/python/mozbuild/mozbuild/test/controller/test_ccachestats.py
--- a/python/mozbuild/mozbuild/test/controller/test_ccachestats.py
+++ b/python/mozbuild/mozbuild/test/controller/test_ccachestats.py
@@ -223,16 +223,143 @@ class TestCcacheStats(unittest.TestCase)
     cleanups performed                  3154
     files in cache                     18525
     cache size                          13.4 GB
     max cache size                      15.0 GB
     """.format(
         timestamp=time.strftime("%c"), timestamp2=time.strftime("%c")
     )
 
+    VERSION_3_5_GIT = """
+    ccache version 3.5.1+2_gf5309092_dirty
+
+    Copyright (C) 2002-2007 Andrew Tridgell
+    Copyright (C) 2009-2019 Joel Rosdahl
+
+    This program is free software; you can redistribute it and/or modify it under
+    the terms of the GNU General Public License as published by the Free Software
+    Foundation; either version 3 of the License, or (at your option) any later
+    version.
+    """
+
+    VERSION_4_2 = """
+    ccache version 4.2.1
+
+    Copyright (C) 2002-2007 Andrew Tridgell
+    Copyright (C) 2009-2021 Joel Rosdahl and other contributors
+
+    See <https://ccache.dev/credits.html> for a complete list of contributors.
+
+    This program is free software; you can redistribute it and/or modify it under
+    the terms of the GNU General Public License as published by the Free Software
+    Foundation; either version 3 of the License, or (at your option) any later
+    version.
+    """
+
+    VERSION_4_4 = """
+    ccache version 4.4
+    Features: file-storage http-storage
+
+    Copyright (C) 2002-2007 Andrew Tridgell
+    Copyright (C) 2009-2021 Joel Rosdahl and other contributors
+
+    See <https://ccache.dev/credits.html> for a complete list of contributors.
+
+    This program is free software; you can redistribute it and/or modify it under
+    the terms of the GNU General Public License as published by the Free Software
+    Foundation; either version 3 of the License, or (at your option) any later
+    version.
+    """
+
+    VERSION_4_4_2 = """
+    ccache version 4.4.2
+    Features: file-storage http-storage
+
+    Copyright (C) 2002-2007 Andrew Tridgell
+    Copyright (C) 2009-2021 Joel Rosdahl and other contributors
+
+    See <https://ccache.dev/credits.html> for a complete list of contributors.
+
+    This program is free software; you can redistribute it and/or modify it under
+    the terms of the GNU General Public License as published by the Free Software
+    Foundation; either version 3 of the License, or (at your option) any later
+    version.
+    """
+
+    VERSION_4_5 = """
+    ccache version 4.5.1
+    Features: file-storage http-storage redis-storage
+
+    Copyright (C) 2002-2007 Andrew Tridgell
+    Copyright (C) 2009-2021 Joel Rosdahl and other contributors
+
+    See <https://ccache.dev/credits.html> for a complete list of contributors.
+
+    This program is free software; you can redistribute it and/or modify it under
+    the terms of the GNU General Public License as published by the Free Software
+    Foundation; either version 3 of the License, or (at your option) any later
+    version.
+    """
+
+    STAT10 = """
+Summary:
+  Cache directory:          /home/suer/.ccache
+  Primary config:           /home/suer/.ccache/ccache.conf
+  Secondary config:         /etc/ccache.conf
+  Stats updated:            {timestamp}
+  Hits:                      916 / 9343 (9.80 %)
+    Direct:                  197 /  197 (100.0 %)
+    Preprocessed:            719 /  719 (100.0 %)
+  Misses:                   8427
+    Direct:                    0
+    Preprocessed:              0
+  Errors:                      1
+  Uncacheable:              1251
+Primary storage:
+  Hits:                        0 /    0
+  Misses:                      0
+  Cache size (GB):          4.41 / 5.00 (88.27 %)
+  Files:                    4425
+  Cleanups:                  161
+Errors:
+  Missing cache file:          1
+Uncacheable:
+  Autoconf compile/link:     418
+  Bad compiler arguments:      6
+  Called for linking:        569
+  Called for preprocessing:  110
+  Compilation failed:         49
+  No input file:               9
+  Preprocessing failed:       90
+    """.format(
+        timestamp=time.strftime("%c")
+    )
+
+    STAT11 = """
+Summary:
+  Cache directory:  /home/suer/.ccache
+  Primary config:   /home/suer/.ccache/ccache.conf
+  Secondary config: /etc/ccache.conf
+  Stats updated:    {timestamp}
+  Hits:                0 /    0
+    Direct:            0 /    0
+    Preprocessed:      0 /    0
+  Misses:              0
+    Direct:            0
+    Preprocessed:      0
+Primary storage:
+  Hits:                0 /    0
+  Misses:              0
+  Cache size (GB):  0.00 / 5.00 (0.00 %)
+  Files:               0
+  Cleanups:           16
+    """.format(
+        timestamp=time.strftime("%c")
+    )
+
     def test_parse_garbage_stats_message(self):
         self.assertRaises(ValueError, CCacheStats, self.STAT_GARBAGE)
 
     def test_parse_zero_stats_message(self):
         stats = CCacheStats(self.STAT0)
         self.assertEqual(stats.cache_dir, "/home/tlin/.ccache")
         self.assertEqual(stats.hit_rates(), (0, 0, 0))
 
@@ -290,11 +417,26 @@ class TestCcacheStats(unittest.TestCase)
         stat8 = CCacheStats(self.STAT8)
         self.assertTrue(stat8)
 
     def test_stats_version35(self):
         # Test parsing 3.5 output.
         stat9 = CCacheStats(self.STAT9)
         self.assertTrue(stat9)
 
+    def test_stats_version44(self):
+        # verify version checks
+        self.assertFalse(CCacheStats._is_version_4_4_or_newer(self.VERSION_3_5_GIT))
+        self.assertFalse(CCacheStats._is_version_4_4_or_newer(self.VERSION_4_2))
+        self.assertTrue(CCacheStats._is_version_4_4_or_newer(self.VERSION_4_4))
+        self.assertTrue(CCacheStats._is_version_4_4_or_newer(self.VERSION_4_4_2))
+        self.assertTrue(CCacheStats._is_version_4_4_or_newer(self.VERSION_4_5))
+
+        # Test parsing 4.4+ output.
+        stat10 = CCacheStats(self.STAT10, True)
+        self.assertTrue(stat10)
+
+        stat11 = CCacheStats(self.STAT11, True)
+        self.assertTrue(stat11)
+
 
 if __name__ == "__main__":
     main()


